name: Build Project

on:
  pull_request:
  workflow_dispatch:
  push:
    tags: ['*']

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pacman packages
        uses: actions/cache@v3
        id: cache-pacman
        with:
          path: |
            /var/cache/pacman/pkg
            /var/lib/pacman/sync
          key: ${{ runner.os }}-pacman-stable
          restore-keys: |
            ${{ runner.os }}-pacman-

      - name: Setup dependencies in Arch Linux
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm \
            base-devel \
            cmake \
            vulkan-devel \
            boost \
            glslang \
            lib32-gcc-libs \
            gcc-libs \
            libc++ \
            libxrandr \
            libxinerama \
            libxcursor \
            libxi \
            libx11 \
            mesa \
            git \
            zip \
            glm \
            pkgconf \
            glfw

      - name: Cache GLM headers
        uses: actions/cache@v3
        id: cache-glm
        with:
          path: /usr/include/glm
          key: ${{ runner.os }}-glm-headers-stable

      - name: Cache shader compilation
        uses: actions/cache@v3
        with:
          path: |
            shaders/*.spv
          key: ${{ runner.os }}-shaders-${{ hashFiles('shaders/**/*.vert', 'shaders/**/*.frag') }}

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: |
            build/
            ~/.cache/
          key: ${{ runner.os }}-cmake-archlinux-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cmake-archlinux-

      # Link para o GLM manualmente caso necessário
      - name: Setup GLM manually
        if: steps.cache-glm.outputs.cache-hit != 'true'
        run: |
          # Verificar se o pkg-config para glm está funcionando
          if ! pkg-config --exists glm; then
            # Verificar onde o GLM está instalado
            ls -la /usr/include/glm
            # Criar manualmente um arquivo .pc para o GLM
            echo "prefix=/usr" > /usr/lib/pkgconfig/glm.pc
            echo "includedir=\${prefix}/include" >> /usr/lib/pkgconfig/glm.pc
            echo "Name: GLM" >> /usr/lib/pkgconfig/glm.pc
            echo "Description: OpenGL Mathematics" >> /usr/lib/pkgconfig/glm.pc
            echo "Version: 0.9.9" >> /usr/lib/pkgconfig/glm.pc
            echo "Cflags: -I\${includedir}" >> /usr/lib/pkgconfig/glm.pc
          fi

      - name: Build project (Linux)
        run: |
          # Definir GLM_INCLUDE_DIR manualmente para o CMake
          export GLM_INCLUDE_DIR=/usr/include/glm
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DGLM_INCLUDE_DIR=/usr/include/glm \
            -DGLFW_INCLUDE_DIR=/usr/include \
            -DCMAKE_PREFIX_PATH=/usr/lib/cmake/glfw3
          cmake --build build --config Release

      - name: Package release (Linux)
        run: |
          mkdir release
          cp -r build/* release/
          zip -r VulkanEngine-linux.zip release/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VulkanEngine-linux-build
          path: |
            VulkanEngine-linux.zip

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache MinGW
        uses: actions/cache@v3
        id: cache-mingw
        with:
          path: C:\ProgramData\chocolatey\lib\mingw
          key: ${{ runner.os }}-mingw-13.2.0-stable

      - name: Install MinGW and dependencies
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          choco install -y mingw --version=13.2.0
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Cache Vulkan SDK
        uses: actions/cache@v3
        id: cache-vulkan
        with:
          path: |
            ${{ env.TEMP }}\VulkanSDK
            C:\VulkanSDK
          key: ${{ runner.os }}-vulkan-1.4.309.0-stable

      - name: Install Vulkan SDK (Windows)
        if: steps.cache-vulkan.outputs.cache-hit != 'true'
        run: |
          $vulkanSdkUrl = "https://sdk.lunarg.com/sdk/download/1.4.309.0/windows/VulkanSDK-1.4.309.0-Installer.exe"
          $installPath = "$env:TEMP\VulkanSDK-Installer.exe"
          Invoke-WebRequest -Uri $vulkanSdkUrl -OutFile $installPath
          Start-Process -FilePath $installPath -Args "--accept-licenses --default-answer --confirm-command install" -Wait
          echo "VK_SDK_PATH=C:\VulkanSDK\1.4.309.0" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Setup Vulkan paths
        run: |
          [Environment]::SetEnvironmentVariable("VK_SDK_PATH", "$env:VULKAN_SDK", [EnvironmentVariableTarget]::Machine)
          echo "VK_SDK_PATH=$env:VULKAN_SDK" >> $env:GITHUB_ENV

      # Add Boost setup for Windows
      - name: Cache Boost
        uses: actions/cache@v3
        id: cache-boost
        with:
          path: C:/Boost
          key: ${{ runner.os }}-boost-1.88.0-stable

      - name: Setup Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          # Create Boost directory
          mkdir -p C:/Boost/include
          mkdir -p C:/Boost/lib
              
          # Download and extract Boost
          $boostUrl = "https://archives.boost.io/release/1.88.0/source/boost_1_88_0.zip"
          $boostZip = "$env:TEMP\boost_1_88_0.zip"
          Invoke-WebRequest -Uri $boostUrl -OutFile $boostZip
          Expand-Archive -Path $boostZip -DestinationPath "$env:TEMP"
              
          # Copy headers
          Copy-Item -Path "$env:TEMP\boost_1_88_0\boost" -Destination "C:/Boost/include" -Recurse
              
          # Build Boost
          cd "$env:TEMP\boost_1_88_0"
          .\bootstrap.bat gcc
          .\b2 --with-filesystem --with-system --with-thread --with-chrono toolset=gcc variant=release link=static threading=multi address-model=64 -j4 install --prefix=C:/Boost

        shell: pwsh

      - name: Cache GLM Library
        uses: actions/cache@v3
        id: cache-glm-windows
        with:
          path: ${{ github.workspace }}\include\glm
          key: ${{ runner.os }}-glm-0.9.9.8-stable

      - name: Install GLM Library
        if: steps.cache-glm-windows.outputs.cache-hit != 'true'
        run: |
          mkdir -p include
          Invoke-WebRequest -Uri "https://github.com/g-truc/glm/releases/download/0.9.9.8/glm-0.9.9.8.zip" -OutFile "glm.zip"
          Expand-Archive -Path "glm.zip" -DestinationPath "include"
          echo "GLM_INCLUDE_DIR=${{ github.workspace }}\include\glm" >> $env:GITHUB_ENV

      - name: Cache GLFW Library
        uses: actions/cache@v3
        id: cache-glfw-windows
        with:
          path: ${{ github.workspace }}\include\glfw
          key: ${{ runner.os }}-glfw-3.3.8-stable

      - name: Install GLFW Library
        if: steps.cache-glfw-windows.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri "https://github.com/glfw/glfw/releases/download/3.3.8/glfw-3.3.8.bin.WIN64.zip" -OutFile "glfw.zip"
          Expand-Archive -Path "glfw.zip" -DestinationPath "include"
          Rename-Item -Path "${{ github.workspace }}\include\glfw-3.3.8.bin.WIN64" -NewName "glfw"
          echo "GLFW_DIR=${{ github.workspace }}\include\glfw" >> $env:GITHUB_ENV

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.14'

      - name: Cache shader compilation
        uses: actions/cache@v3
        with:
          path: |
            shaders/*.spv
          key: ${{ runner.os }}-shaders-${{ hashFiles('shaders/**/*.vert', 'shaders/**/*.frag') }}

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: |
            build/
            ~\.cmake\
          key: ${{ runner.os }}-cmake-mingw-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cmake-mingw-

      - name: Build project (Windows)
        run: |
          $env:PATH = ($env:PATH.Split(';') | Where-Object { $_ -notmatch 'Git' }) -join ';'
          cmake -S . -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
        shell: pwsh

      - name: Package release (Windows)
        run: |
          mkdir release
          xcopy /E /I build\* release\
          7z a VulkanEngine-windows.zip ./release/*

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VulkanEngine-windows-build
          path: |
            VulkanEngine-windows.zip

  # New publish job that only runs when a tag is pushed
  publish-release:
    name: Publish Release
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    # Only run this job when a tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure of downloaded files
        run: ls -R artifacts
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: VulkanEngine ${{ steps.get_tag.outputs.TAG_NAME }}
          tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false
          files: |
            artifacts/VulkanEngine-linux-build/VulkanEngine-linux.zip
            artifacts/VulkanEngine-windows-build/VulkanEngine-windows.zip
          body: |
            # VulkanEngine Release ${{ steps.get_tag.outputs.TAG_NAME }}
            
            ## What's New
            
            - Release version ${{ steps.get_tag.outputs.TAG_NAME }}
            
            ## Downloads
            
            - [Windows Build](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_tag.outputs.TAG_NAME }}/VulkanEngine-windows.zip)
            - [Linux Build](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_tag.outputs.TAG_NAME }}/VulkanEngine-linux.zip)
            
            ## Installation
            
            1. Download the appropriate zip file for your platform
            2. Extract the contents
            3. Run the VulkanEngine executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}