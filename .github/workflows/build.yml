name: Build VulkanEngine

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    env:
      CMAKE_VERSION: '3.20.0'
      VULKAN_SDK_VERSION: '1.2.182.0'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev libxi-dev libgl1-mesa-dev \
            libxrandr-dev libxinerama-dev libxcursor-dev \
            libvulkan-dev

      - name: Download and set up Vulkan SDK (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -qO vulkan-sdk.tar.gz "https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_SDK_VERSION }}/linux/vulkan-sdk.tar.gz?Human=true"
          mkdir -p $HOME/vulkan-sdk
          tar -xzf vulkan-sdk.tar.gz -C $HOME/vulkan-sdk --strip-components=1
          echo "export VULKAN_SDK=$HOME/vulkan-sdk/x86_64" >> $GITHUB_ENV
          echo "export PATH=$HOME/vulkan-sdk/x86_64/bin:$PATH" >> $GITHUB_ENV
          echo "export LD_LIBRARY_PATH=$HOME/vulkan-sdk/x86_64/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Download and set up Vulkan SDK (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Instala Vulkan SDK usando o método manual, caso o Chocolatey tenha problemas
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_SDK_VERSION }}/windows/vulkan-sdk.zip?Human=true" -OutFile vulkan-sdk.zip
          Expand-Archive -Path vulkan-sdk.zip -DestinationPath $env:USERPROFILE\vulkan-sdk -Force
          echo "VULKAN_SDK=$env:USERPROFILE\vulkan-sdk" >> $GITHUB_ENV

      - name: Debug temporary files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Para depuração, listando os arquivos temporários
          dir D:\a\_temp\

      - name: Configure CMake project
        run: cmake -S . -B build -DVULKAN_INCLUDE_DIR=$VULKAN_SDK/include -DVULKAN_LIB_DIR=$VULKAN_SDK/lib

      - name: Build project
        run: cmake --build build --config Release

      - name: Run tests
        working-directory: build
        run: ctest --output-on-failure