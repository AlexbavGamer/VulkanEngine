name: Build Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configuração específica para Windows
      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Vulkan SDK (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $vulkanUrl = "https://sdk.lunarg.com/sdk/download/1.4.309.0/windows/VulkanSDK-1.4.309.0-Installer.exe"
          $installerPath = "$env:TEMP\VulkanSDK-Installer.exe"
          Invoke-WebRequest -Uri $vulkanUrl -OutFile $installerPath
          Start-Process -FilePath $installerPath -Args "--accept-licenses --default-answer --confirm-command install" -Wait
          [Environment]::SetEnvironmentVariable("VULKAN_SDK", "$env:VULKAN_SDK", [EnvironmentVariableTarget]::Machine)
          echo "VULKAN_SDK=$env:VULKAN_SDK" >> $env:GITHUB_ENV
          echo "$env:VULKAN_SDK\Bin" >> $env:GITHUB_PATH

      # Configuração específica para Linux
      - name: Install Vulkan SDK (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y wget software-properties-common
          sudo apt install -y libvulkan-dev vulkan-tools
          sudo apt install -y libglm-dev
          sudo apt install -y libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
          sudo apt install -y libwayland-dev libxkbcommon-dev
          sudo apt install -y spirv-tools

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.14'

      # Build para Windows
      - name: Build project (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      # Build para Linux
      - name: Build project (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      # Build the project (Windows)
      - name: Build project (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cmake -S . -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      # Package release artifacts (Linux)
      - name: Package release (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir release
          cp -r build/* release/
          zip -r VulkanEngine-linux.zip release/

      # Package release artifacts (Windows)
      - name: Package release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          xcopy /E /I build\* release\
          7z a VulkanEngine-windows.zip ./release/*

      # Upload release artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VulkanEngine-build
          path: |
            build/*